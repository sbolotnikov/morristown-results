"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/process-pdf/route";
exports.ids = ["app/api/process-pdf/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pdf-parse":
/*!****************************!*\
  !*** external "pdf-parse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("pdf-parse");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_sbolo_WebProjects_morristown_results_src_app_api_process_pdf_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/process-pdf/route.ts */ \"(rsc)/./src/app/api/process-pdf/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/process-pdf/route\",\n        pathname: \"/api/process-pdf\",\n        filename: \"route\",\n        bundlePath: \"app/api/process-pdf/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\sbolo\\\\WebProjects\\\\morristown-results\\\\src\\\\app\\\\api\\\\process-pdf\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_sbolo_WebProjects_morristown_results_src_app_api_process_pdf_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/process-pdf/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9jZXNzLXBkZiUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcHJvY2Vzcy1wZGYlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwcm9jZXNzLXBkZiUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNzYm9sbyU1Q1dlYlByb2plY3RzJTVDbW9ycmlzdG93bi1yZXN1bHRzJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNzYm9sbyU1Q1dlYlByb2plY3RzJTVDbW9ycmlzdG93bi1yZXN1bHRzJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN1QztBQUNwSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL21vcnJpc3Rvd24tcmVzdWx0cy8/M2Q3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxzYm9sb1xcXFxXZWJQcm9qZWN0c1xcXFxtb3JyaXN0b3duLXJlc3VsdHNcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccHJvY2Vzcy1wZGZcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Byb2Nlc3MtcGRmL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcHJvY2Vzcy1wZGZcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3Byb2Nlc3MtcGRmL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcc2JvbG9cXFxcV2ViUHJvamVjdHNcXFxcbW9ycmlzdG93bi1yZXN1bHRzXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHByb2Nlc3MtcGRmXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wcm9jZXNzLXBkZi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/process-pdf/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/process-pdf/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_competitionProcessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/competitionProcessor */ \"(rsc)/./src/lib/competitionProcessor.ts\");\n\n\nconst runtime = \"nodejs\"; // Specify Node.js runtime\nasync function POST(req) {\n    console.log(\"API route /api/process-pdf received a request.\");\n    try {\n        const formData = await req.formData();\n        const pdfFile = formData.get(\"pdfFile\");\n        if (!pdfFile) {\n            console.error(\"No PDF file uploaded.\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No PDF file uploaded\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"Processing uploaded PDF file:\", pdfFile.name);\n        const arrayBuffer = await pdfFile.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        try {\n            let pdfParse;\n            // Try to require pdf-parse, fallback if it fails\n            try {\n                pdfParse = __webpack_require__(/*! pdf-parse */ \"pdf-parse\");\n            } catch (requireError) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"PDF parsing library not available. Please install pdf-parse.\"\n                }, {\n                    status: 500\n                });\n            }\n            // Extract text from PDF\n            const data = await pdfParse(buffer);\n            const text = data.text;\n            if (!text || text.trim() === \"\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Could not extract text from the PDF. It might be empty, image-based, or corrupted.\"\n                }, {\n                    status: 400\n                });\n            }\n            // Split text into lines for easier processing\n            let lines = text.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0);\n            // Handle PDF-specific format where place/proficiency/heat/event are on one line\n            // Split lines like \"1 [97.0]Heat 288\", \"*A [95.0]Heat 288\", etc.\n            // into separate lines: \"1 [97.0]\", \"Heat 288\", \"L-B1 Bronze Closed Prof. Grade Foxtrot\"\n            const processedLines = [];\n            for (const line of lines){\n                // Check if this is a student/teacher line - keep as is\n                const studentTeacherMatch = line.match(/^(.+?)\\/(.+?)\\s*\\(#\\d+\\)\\s*\\[.+?\\]$|^(.+?)\\s*\\(#\\d+\\)\\/(.+?)\\s*\\[.+?\\]$/);\n                if (studentTeacherMatch) {\n                    processedLines.push(line);\n                } else {\n                    // Check if this line matches the condensed format: \"place [score]Heat number event description\"\n                    // Updated to handle places like \"*A\", \"1\", \"*B\", etc.\n                    const condensedMatch = line.match(/^([*]?[A-Za-z0-9]+\\s*(?:\\[\\d+\\.?\\d*\\])?)((Heat|Solo)\\s+\\d+)(.+)$/);\n                    if (condensedMatch) {\n                        // Split into separate lines\n                        if (condensedMatch[2].trim() == \"Solo\") {\n                            console.log(\"\", condensedMatch);\n                        }\n                        processedLines.push(condensedMatch[1].trim()); // \"1 [97.0]\"\n                        processedLines.push(condensedMatch[2].trim()); // \"Heat 288\"\n                        processedLines.push(condensedMatch[4].trim()); // \"L-B1 Bronze Closed Prof. Grade Foxtrot\"\n                    } else {\n                        // Keep line as is if it doesn't match the condensed format\n                        processedLines.push(line);\n                    }\n                }\n            }\n            lines = processedLines;\n            //   console.log('Processed lines for PDF:', lines);\n            // Process the competition data using the same logic as DOCX\n            const { processedData, processedDataAmateurCouples } = (0,_lib_competitionProcessor__WEBPACK_IMPORTED_MODULE_1__.processCompetitionData)(lines);\n            if (processedData.length === 0) {\n                // Log the extracted lines for debugging\n                console.log(\"Debug - First 20 lines extracted from PDF:\");\n                lines.slice(0, 20).forEach((line, index)=>{\n                    console.log(`Line ${index + 1}: \"${line}\"`);\n                });\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"No valid competition entries found in the PDF after processing.\",\n                    debug: {\n                        totalLines: lines.length,\n                        sampleLines: lines.slice(0, 20),\n                        message: \"Check console logs for detailed line-by-line output\"\n                    }\n                }, {\n                    status: 400\n                });\n            }\n            // Generate CSV using the same logic as DOCX\n            const csv = (0,_lib_competitionProcessor__WEBPACK_IMPORTED_MODULE_1__.generateCSVFromProcessedData)(processedData, processedDataAmateurCouples);\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(csv, {\n                headers: {\n                    \"Content-Type\": \"text/csv\",\n                    \"Content-Disposition\": 'attachment; filename=\"competition_results_from_pdf.csv\"'\n                }\n            });\n        } catch (parsingError) {\n            console.error(\"Error during PDF parsing:\", parsingError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `PDF parsing failed: ${parsingError.message || \"Unknown error\"}`\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Unhandled error in PDF API route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Internal Server Error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/process-pdf/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/competitionProcessor.ts":
/*!*****************************************!*\
  !*** ./src/lib/competitionProcessor.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateCSVFromProcessedData: () => (/* binding */ generateCSVFromProcessedData),\n/* harmony export */   processCompetitionData: () => (/* binding */ processCompetitionData)\n/* harmony export */ });\n// Shared processing logic for competition results\nfunction processCompetitionData(lines) {\n    const processedData = [];\n    const processedDataAmateurCouples = [];\n    let sumOfPoints = 0;\n    let currentstudent;\n    //   console.log('=== STARTING COMPETITION DATA PROCESSING ===');\n    //   console.log(`Total lines to process: ${lines.length}`);\n    // Process lines to extract competition data\n    for(let i = 0; i < lines.length; i++){\n        const line = lines[i];\n        // Check if this line contains student/teacher info in format: \"Name/Name (#number) [Location]\" or \"Name (#number)/Name [Location]\"\n        const studentTeacherMatch = line.match(/^(.+?)\\/(.+?)\\s*\\(#\\d+\\)\\s*\\[.+?\\]$|^(.+?)\\s*\\(#\\d+\\)\\/(.+?)\\s*\\[.+?\\]$/);\n        if (studentTeacherMatch) {\n            //   console.log(`Found student/teacher match at line ${i + 1}: \"${line}\"`);\n            // Handle both formats: Name/Name (#number) [Location] and Name (#number)/Name [Location]\n            let student, teacher;\n            if (studentTeacherMatch[1] && studentTeacherMatch[2]) {\n                // Format: Name/Name (#number) [Location]\n                student = studentTeacherMatch[1].trim();\n                teacher = studentTeacherMatch[2].trim();\n            // console.log(`  Format 1 - Student: \"${student}\", Teacher: \"${teacher}\"`);\n            } else if (studentTeacherMatch[3] && studentTeacherMatch[4]) {\n                // Format: Name (#number)/Name [Location]\n                student = studentTeacherMatch[3].trim();\n                teacher = studentTeacherMatch[4].trim();\n            // console.log(`  Format 2 - Student: \"${student}\", Teacher: \"${teacher}\"`);\n            }\n            // Look ahead for all place/proficiency and heat/event information for this student/teacher pair\n            let j = i + 1;\n            //   console.log(`  Looking ahead from line ${j + 1} for competition data...`);\n            // Continue processing entries until we hit another student/teacher line or end of file\n            while(j < lines.length){\n                // console.log(`    Checking line ${j + 1}: \"${lines[j]}\"`);\n                // Check if we've hit another student/teacher line\n                const nextStudentTeacherMatch = lines[j].match(/^(.+?)\\/(.+?)\\s*\\(#\\d+\\)\\s*\\[.+?\\]$|^(.+?)\\s*\\(#\\d+\\)\\/(.+?)\\s*\\[.+?\\]$/);\n                if (nextStudentTeacherMatch) {\n                    break;\n                }\n                let place = \"\";\n                let proficiency = \"\";\n                let heatNumber = \"\";\n                let eventDescription = \"\";\n                // Find place/proficiency line (format: \"1 [93.0]\", \"1\", \"*A [95.0]\", \"*A\", etc.)\n                const placeLine = lines[j];\n                let checkSoloLine = placeLine.match(/^(Solo)\\s+\\d+$/);\n                const placeMatch = placeLine.match(/^([*]?[A-Za-z0-9]+)(?:\\s*\\[(\\d+\\.?\\d*)\\])?$/);\n                if (placeMatch) {\n                    place = placeMatch[1];\n                    proficiency = placeMatch[2] || \"\";\n                    //   console.log(`    Found place match: place=\"${place}\", proficiency=\"${proficiency}\"`);\n                    j++;\n                    // Find heat line (format: \"Heat 612\")\n                    while(j < lines.length){\n                        const heatLine = lines[j];\n                        // console.log(`  Checking for heat pattern in line ${j + 1}: \"${heatLine}\"`);\n                        const heatMatch = heatLine.match(/^(Heat|Solo)\\s+(\\d+)$/);\n                        checkSoloLine = heatLine.match(/^(Solo)\\s+\\d+$/);\n                        if (checkSoloLine) {\n                            // This is a Solo or Heat line, skip it\n                            console.log(heatLine);\n                        }\n                        if (heatMatch) {\n                            heatNumber = heatMatch[1] + \" \" + heatMatch[2];\n                            //   console.log(`      Found heat match: \"${heatNumber}\"`);\n                            j++;\n                            break;\n                        }\n                        j++;\n                    }\n                    // Find event description line (next line after heat)\n                    if (j < lines.length) {\n                        // console.log(`      Checking for event description in line ${j + 1}: \"${lines[j]}\"`);\n                        // Check if this is another student/teacher line\n                        const checkStudentTeacher = lines[j].match(/^(.+?)\\/(.+?)\\s*\\(#\\d+\\)\\s*\\[.+?\\]$|^(.+?)\\s*\\(#\\d+\\)\\/(.+?)\\s*\\[.+?\\]$/);\n                        if (!checkStudentTeacher) {\n                            eventDescription = lines[j];\n                            // Replace all double quotes with single quotes in event description\n                            eventDescription = eventDescription.replace(/\"/g, \"'\");\n                            if (checkSoloLine) {\n                                // This is a Solo or Heat line, skip it\n                                console.log(lines[j]);\n                            }\n                            //   console.log(`      Found event description: \"${eventDescription}\"`);\n                            j++;\n                        }\n                    }\n                    // Process this entry if we have all required information\n                    if (student && teacher && place && heatNumber && eventDescription) {\n                        if (checkSoloLine) {\n                            // This is a Solo or Heat line, skip it\n                            console.log(`    ✓ Complete entry found: Student=\"${student}\", Teacher=\"${teacher}\", Place=\"${place}\", Heat=\"${heatNumber}\", Proficiency=\"${proficiency}\", Event=\"${eventDescription}\"`);\n                        }\n                        // console.log(`    ✓ Complete entry found: Student=\"${student}\", Teacher=\"${teacher}\", Place=\"${place}\", Heat=\"${heatNumber}\", Event=\"${eventDescription}\"`);\n                        // Check for \"AC-\" or \"Pro heat\" indicators\n                        if (eventDescription.includes(\"AC-\")) {\n                            // Process AC- entries separately\n                            const fullEvent = ` ${heatNumber} ${eventDescription.trim()}`;\n                            let points = 0;\n                            // Base Points for Event Types\n                            if (fullEvent.includes(\"Schol\") || fullEvent.includes(\"Champ\")) {\n                                // For Scholarship or Championship events, count slashes between parentheses\n                                const parenthesesMatch = fullEvent.match(/\\(([^)]+)\\)/);\n                                if (parenthesesMatch) {\n                                    const contentInParentheses = parenthesesMatch[1];\n                                    const slashCount = (contentInParentheses.match(/\\//g) || []).length;\n                                    points = slashCount + 2;\n                                } else {\n                                    points = 2;\n                                }\n                            } else {\n                                points = 11;\n                            }\n                            // Additional Points for Placement or Proficiency\n                            if (proficiency) {\n                                const profScore = parseFloat(proficiency);\n                                if (profScore >= 96.5) {\n                                    points += 3;\n                                } else if (profScore >= 93.5) {\n                                    points += 2;\n                                } else if (profScore >= 89.5) {\n                                    points += 1;\n                                }\n                            } else {\n                                const placeNum = parseInt(place);\n                                if (placeNum === 1) {\n                                    points += 3;\n                                } else if (placeNum === 2) {\n                                    points += 2;\n                                } else if (placeNum === 3) {\n                                    points += 1;\n                                } else if (isNaN(placeNum)) {\n                                    points -= 1;\n                                }\n                            }\n                            processedDataAmateurCouples.push({\n                                Student: student.trim(),\n                                Teacher: teacher.trim(),\n                                Event: fullEvent.trim(),\n                                Place: place.trim(),\n                                Proficiency: proficiency ? proficiency.trim() : \"\",\n                                Points: points\n                            });\n                            continue;\n                        } else if (eventDescription.toLowerCase().includes(\"pro heat\")) {\n                            continue;\n                        }\n                        const fullEvent = ` ${heatNumber} ${eventDescription.trim()}`;\n                        let points = 0;\n                        // Base Points for Event Types\n                        if (fullEvent.includes(\"Schol\") || fullEvent.includes(\"Champ\")) {\n                            // For Scholarship or Championship events, count slashes between parentheses\n                            const parenthesesMatch = fullEvent.match(/\\(([^)]+)\\)/);\n                            if (parenthesesMatch) {\n                                const contentInParentheses = parenthesesMatch[1];\n                                const slashCount = (contentInParentheses.match(/\\//g) || []).length;\n                                points = slashCount + 2;\n                            } else {\n                                points = 2;\n                            }\n                        } else {\n                            // All individual entries, Solo, Novelty, Showcase\n                            points = 11;\n                        }\n                        // Additional Points for Placement or Proficiency\n                        if (proficiency) {\n                            const profScore = parseFloat(proficiency);\n                            if (profScore >= 96.5) {\n                                points += 3;\n                            } else if (profScore >= 93.5) {\n                                points += 2;\n                            } else if (profScore >= 89.5) {\n                                points += 1;\n                            }\n                        } else {\n                            const placeNum = parseInt(place);\n                            if (placeNum === 1) {\n                                points += 3;\n                            } else if (placeNum === 2) {\n                                points += 2;\n                            } else if (placeNum === 3) {\n                                points += 1;\n                            } else if (isNaN(placeNum)) {\n                                points -= 1;\n                            }\n                        }\n                        if (currentstudent !== student.trim()) {\n                            currentstudent = student.trim();\n                            if (processedData.length > 1) processedData.push({\n                                Student: \"Total :\",\n                                Teacher: \"\",\n                                Event: \"\",\n                                Place: \"\",\n                                Proficiency: \"\",\n                                Points: sumOfPoints\n                            });\n                            sumOfPoints = points;\n                        } else {\n                            sumOfPoints += points;\n                        }\n                        processedData.push({\n                            Student: student.trim(),\n                            Teacher: teacher.trim(),\n                            Event: fullEvent.trim(),\n                            Place: place.trim(),\n                            Proficiency: proficiency ? proficiency.trim() : \"\",\n                            Points: points\n                        });\n                    } else {\n                        console.log(`    ✗ Incomplete entry: Student=\"${student}\", Teacher=\"${teacher}\", Place=\"${place}\", Heat=\"${heatNumber}\", Event=\"${eventDescription}\"`);\n                    }\n                } else {\n                    console.log(`    No place pattern match for line: \"${placeLine}\"`);\n                    j++;\n                }\n            }\n            // Update i to j-1 so the main loop continues from where we left off\n            i = j - 1;\n        } else {\n            // Log lines that don't match student/teacher pattern (only first few for brevity)\n            if (i < 10) {\n                console.log(`Line ${i + 1} doesn't match student/teacher pattern: \"${line}\"`);\n            }\n        }\n    }\n    //   console.log(`=== PROCESSING COMPLETE ===`);\n    //   console.log(`Processed data entries: ${processedData.length}`);\n    //   console.log(`Amateur couples entries: ${processedDataAmateurCouples.length}`);\n    return {\n        processedData,\n        processedDataAmateurCouples\n    };\n}\nfunction generateCSVFromProcessedData(processedData, processedDataAmateurCouples) {\n    // Calculate totals for each unique student and teacher\n    const studentTotals = new Map();\n    const teacherTotals = new Map();\n    // Calculate totals from processed data (excluding any existing \"Total :\" entries)\n    processedData.forEach((entry)=>{\n        if (entry.Student !== \"Total :\") {\n            const student = entry.Student;\n            const teacher = entry.Teacher;\n            const points = entry.Points;\n            // Add to student totals\n            studentTotals.set(student, (studentTotals.get(student) || 0) + points);\n            // Add to teacher totals\n            teacherTotals.set(teacher, (teacherTotals.get(teacher) || 0) + points);\n        }\n    });\n    // Create final data array with proper order\n    const finalProcessedData = [];\n    // 1. Add student totals first\n    finalProcessedData.push({\n        Student: \"STUDENT TOTALS:\",\n        Teacher: \"\",\n        Event: \"\",\n        Place: \"\",\n        Proficiency: \"\",\n        Points: \"\"\n    });\n    studentTotals.forEach((total, student)=>{\n        finalProcessedData.push({\n            Student: student,\n            Teacher: \"\",\n            Event: \"\",\n            Place: \"\",\n            Proficiency: \"\",\n            Points: total\n        });\n    });\n    // 2. Add teacher totals\n    finalProcessedData.push({\n        Student: \"\",\n        Teacher: \"\",\n        Event: \"\",\n        Place: \"\",\n        Proficiency: \"\",\n        Points: \"\"\n    });\n    finalProcessedData.push({\n        Student: \"TEACHER TOTALS:\",\n        Teacher: \"\",\n        Event: \"\",\n        Place: \"\",\n        Proficiency: \"\",\n        Points: \"\"\n    });\n    teacherTotals.forEach((total, teacher)=>{\n        finalProcessedData.push({\n            Student: \"\",\n            Teacher: teacher,\n            Event: \"\",\n            Place: \"\",\n            Proficiency: \"\",\n            Points: total\n        });\n    });\n    // 3. Add Amateur Couples totals (if any)\n    if (processedDataAmateurCouples.length > 0) {\n        const amateurCoupleTotals = new Map();\n        processedDataAmateurCouples.forEach((entry)=>{\n            const coupleKey = `${entry.Student}/${entry.Teacher}`;\n            amateurCoupleTotals.set(coupleKey, (amateurCoupleTotals.get(coupleKey) || 0) + entry.Points);\n        });\n        finalProcessedData.push({\n            Student: \"\",\n            Teacher: \"\",\n            Event: \"\",\n            Place: \"\",\n            Proficiency: \"\",\n            Points: \"\"\n        });\n        finalProcessedData.push({\n            Student: \"AMATEUR COUPLES TOTALS:\",\n            Teacher: \"\",\n            Event: \"\",\n            Place: \"\",\n            Proficiency: \"\",\n            Points: \"\"\n        });\n        amateurCoupleTotals.forEach((total, couple)=>{\n            const [student, teacher] = couple.split(\"/\");\n            finalProcessedData.push({\n                Student: student,\n                Teacher: teacher,\n                Event: \"\",\n                Place: \"\",\n                Proficiency: \"\",\n                Points: total\n            });\n        });\n        // 4. Add Amateur Couples entries\n        finalProcessedData.push({\n            Student: \"\",\n            Teacher: \"\",\n            Event: \"\",\n            Place: \"\",\n            Proficiency: \"\",\n            Points: \"\"\n        });\n        finalProcessedData.push({\n            Student: \"AMATEUR COUPLES ENTRIES:\",\n            Teacher: \"\",\n            Event: \"\",\n            Place: \"\",\n            Proficiency: \"\",\n            Points: \"\"\n        });\n        processedDataAmateurCouples.forEach((entry)=>{\n            finalProcessedData.push(entry);\n        });\n    }\n    // 5. Add other entries (main competition entries)\n    finalProcessedData.push({\n        Student: \"\",\n        Teacher: \"\",\n        Event: \"\",\n        Place: \"\",\n        Proficiency: \"\",\n        Points: \"\"\n    });\n    finalProcessedData.push({\n        Student: \"MAIN COMPETITION ENTRIES:\",\n        Teacher: \"\",\n        Event: \"\",\n        Place: \"\",\n        Proficiency: \"\",\n        Points: \"\"\n    });\n    // Add all main entries (excluding \"Total :\" entries)\n    processedData.forEach((entry)=>{\n        if (entry.Student !== \"Total :\") {\n            finalProcessedData.push(entry);\n        }\n    });\n    // Generate CSV\n    const csvHeader = \"Student,Teacher,Event,Place,Proficiency,Points\\n\";\n    const csvRows = finalProcessedData.map((row)=>`\"${row.Student}\",\"${row.Teacher}\",\"${row.Event}\",\"${row.Place}\",\"${row.Proficiency}\",${row.Points}`).join(\"\\n\");\n    return csvHeader + csvRows;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/competitionProcessor.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Csbolo%5CWebProjects%5Cmorristown-results&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();